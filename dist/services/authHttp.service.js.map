{"version":3,"sources":["../src/services/authHttp.service.ts"],"names":[],"mappings":"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","file":"authHttp.service.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Http, Response, Headers, RequestOptionsArgs, RequestOptions, RequestMethod, URLSearchParams} from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport {AdalService} from './adal.service';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/observable/throw';\n\n@Injectable()\nexport class AuthHttp {\n    constructor(private http: Http\n        , private adalService: AdalService\n    ) { }\n\n    get(url: string, options?: RequestOptionsArgs): Observable<any> {\n        let options1 = new RequestOptions({ method: RequestMethod.Get });\n        options1 = options1.merge(options);\n        return this.sendRequest(url, options1);\n    }\n\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\n        let options1 = new RequestOptions({ method: RequestMethod.Post, body: body });\n        options1 = options1.merge(options);\n        return this.sendRequest(url, options1);\n    }\n\n    delete(url: string, options?: RequestOptionsArgs): Observable<any> {\n        let options1 = new RequestOptions({ method: RequestMethod.Delete });\n        options1 = options1.merge(options);\n        return this.sendRequest(url, options1);\n    }\n\n\n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\n        let options1 = new RequestOptions({ method: RequestMethod.Patch, body: body });\n        options1 = options1.merge(options);\n        return this.sendRequest(url, options1);\n    }\n\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\n        let options1 = new RequestOptions({ method: RequestMethod.Put, body: body });\n        options1 = options1.merge(options);\n        return this.sendRequest(url, options1);\n    }\n\n    head(url: string, options?: RequestOptionsArgs): Observable<any> {\n        let options1 = new RequestOptions({ method: RequestMethod.Put });\n        options1 = options1.merge(options);\n        return this.sendRequest(url, options1);\n    }\n\n    private sendRequest(url: string, options: RequestOptionsArgs): Observable<string> {\n        // make a copy\n        let options1 = new RequestOptions();\n        options1.method = options.method;\n        options1 = options1.merge(options);\n        let resource = this.adalService.GetResourceForEndpoint(url);\n        let authenticatedCall: Observable<string>;\n        if (resource) {\n            if (this.adalService.userInfo.isAuthenticated) {\n                authenticatedCall = this.adalService.acquireToken(resource)\n                    .flatMap((token: string) => {\n                        if (options1.headers == null) {\n                            options1.headers = new Headers();\n                        }\n                        options1.headers.set('Authorization', 'Bearer ' + token);\n                        return this.http.request(url, options1)\n                            .catch(this.handleError);\n                    });\n            }\n            else {\n                authenticatedCall = Observable.throw(new Error('User Not Authenticated.'));\n            }\n        }\n        else {\n            authenticatedCall = this.http.request(url, options).map(this.extractData).catch(this.handleError);\n        }\n\n        return authenticatedCall;\n    }\n\n    private extractData(res: Response) {\n        if (res.status < 200 || res.status >= 300) {\n            throw new Error('Bad response status: ' + res.status);\n        }\n\n        let body = {};\n        // if there is some content, parse it\n        if (res.status !== 204) {\n            body = res.json();\n        }\n\n        return body || {};\n    }\n\n    private handleError(error: any) {\n        return Observable.throw(error);\n    }\n}\n"]}